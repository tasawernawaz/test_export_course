0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,420
Up to now, we've been discussing a single queuing system.

2
00:00:03,420 --> 00:00:05,430
This could represent a machine in a factory

3
00:00:05,430 --> 00:00:08,820
with work orders coming in from elsewhere in the factory.

4
00:00:08,820 --> 00:00:11,280
We've seen how the waiting line grows and shrinks as orders

5
00:00:11,280 --> 00:00:13,445
arrive and jobs are completed.

6
00:00:13,445 --> 00:00:15,570
We've also seen the relationship between the demand

7
00:00:15,570 --> 00:00:18,830
on the machine and the waiting time at that machine.

8
00:00:18,830 --> 00:00:21,100
But now, we can ask another question.

9
00:00:21,100 --> 00:00:23,380
Where are these work orders coming from,

10
00:00:23,380 --> 00:00:25,000
and where are they going?

11
00:00:25,000 --> 00:00:28,030
In most cases, manufacturing requires multiple operations

12
00:00:28,030 --> 00:00:30,580
on parts at different machines.

13
00:00:30,580 --> 00:00:32,350
Each of those operations will take place

14
00:00:32,350 --> 00:00:36,430
at a workstation, which includes a machine or a worker, or both.

15
00:00:36,430 --> 00:00:39,460
There will also be a storage area, called the buffer,

16
00:00:39,460 --> 00:00:41,770
between those workstations.

17
00:00:41,770 --> 00:00:44,790
Or the parts may be located at a workstation.

18
00:00:44,790 --> 00:00:48,100
Or the pieces may be stored at the workstation.

19
00:00:48,100 --> 00:00:50,770
The material in the buffer is referred to as work-in-process

20
00:00:50,770 --> 00:00:54,730
inventory, or WIP, W-I-P. In other words,

21
00:00:54,730 --> 00:00:57,670
work orders or parts travel from one queue to another,

22
00:00:57,670 --> 00:01:00,850
and visit more than one station before they leave the system.

23
00:01:00,850 --> 00:01:03,970
In some cases, the parts revisit the same station multiple times

24
00:01:03,970 --> 00:01:05,349
for different operations.

25
00:01:05,349 --> 00:01:08,230
This is especially true in semiconductor manufacturing.

26
00:01:08,230 --> 00:01:11,270
There are two kinds of systems that we'll study.

27
00:01:11,270 --> 00:01:13,060
First of all, there's open networks.

28
00:01:13,060 --> 00:01:16,000
In open networks, customers enter and leave the system.

29
00:01:16,000 --> 00:01:18,480
Lambda is known, and we must find l and w.

30
00:01:18,480 --> 00:01:21,200


31
00:01:21,200 --> 00:01:23,780
Closed networks are those in which the population

32
00:01:23,780 --> 00:01:25,420
of the system is constant.

33
00:01:25,420 --> 00:01:28,820
l is known, and we must find lambda and w.

34
00:01:28,820 --> 00:01:32,570
Some examples of open networks include internet traffic.

35
00:01:32,570 --> 00:01:35,580
Emergency rooms-- where you arrive,

36
00:01:35,580 --> 00:01:39,650
triage decides what service you need, you go to a waiting room,

37
00:01:39,650 --> 00:01:43,220
you get treatment, you get tests, and then you exit,

38
00:01:43,220 --> 00:01:44,840
or you go to hospital admission.

39
00:01:44,840 --> 00:01:45,800
A food court.

40
00:01:45,800 --> 00:01:49,040
An airport-- you arrive, you go to a ticket counter,

41
00:01:49,040 --> 00:01:51,920
you go to security, you go to passport control,

42
00:01:51,920 --> 00:01:55,530
you go to your gate, and then, finally, you board the plane.

43
00:01:55,530 --> 00:01:57,140
Another example is a factory in which

44
00:01:57,140 --> 00:01:58,880
there's no centralized material flow

45
00:01:58,880 --> 00:02:01,500
control after material enters.

46
00:02:01,500 --> 00:02:03,690
Here's a food court.

47
00:02:03,690 --> 00:02:05,160
Let's focus on the people that are

48
00:02:05,160 --> 00:02:07,170
customers in the food court.

49
00:02:07,170 --> 00:02:09,240
They enter on the left.

50
00:02:09,240 --> 00:02:12,570
They go to their first food destination--

51
00:02:12,570 --> 00:02:16,350
pizza or hamburgers or possibly frozen yogurt.

52
00:02:16,350 --> 00:02:18,060
They wait in line.

53
00:02:18,060 --> 00:02:19,230
They get their food.

54
00:02:19,230 --> 00:02:21,720
And they get a tray that the food comes on,

55
00:02:21,720 --> 00:02:25,530
and they carry the food on the tray to a seating area.

56
00:02:25,530 --> 00:02:28,680
And they sit there, and they eat their food.

57
00:02:28,680 --> 00:02:31,890
From there, they might go back to get more food

58
00:02:31,890 --> 00:02:36,900
from a different restaurant, and go back to the seating area.

59
00:02:36,900 --> 00:02:38,677
Or they might leave the system.

60
00:02:38,677 --> 00:02:40,260
Of course, when they leave the system,

61
00:02:40,260 --> 00:02:42,180
they drop off their trays.

62
00:02:42,180 --> 00:02:44,460
So people are entering from outside,

63
00:02:44,460 --> 00:02:46,530
and getting service, and then leaving.

64
00:02:46,530 --> 00:02:48,030
And the rate of arrivals, of course,

65
00:02:48,030 --> 00:02:50,363
equals the rate of departures-- at least in steady state

66
00:02:50,363 --> 00:02:51,840
or over the long run.

67
00:02:51,840 --> 00:02:53,880
For closed networks-- well, before we

68
00:02:53,880 --> 00:02:55,380
go into other examples, let's just

69
00:02:55,380 --> 00:02:59,310
think about those trays in the food court.

70
00:02:59,310 --> 00:03:03,270
The trays are dispensed by the restaurants.

71
00:03:03,270 --> 00:03:07,500
Customers use them, and then they drop them off someplace,

72
00:03:07,500 --> 00:03:09,900
and they get washed and recycled back

73
00:03:09,900 --> 00:03:12,030
to those very same restaurants.

74
00:03:12,030 --> 00:03:13,530
So the number of trays in the system

75
00:03:13,530 --> 00:03:16,380
stays constant, as long as nobody steals a tray.

76
00:03:16,380 --> 00:03:19,110
Other examples include a factory with limited fixtures

77
00:03:19,110 --> 00:03:20,700
or pallets.

78
00:03:20,700 --> 00:03:22,830
Parts enter the system.

79
00:03:22,830 --> 00:03:25,230
They get attached to an empty pallet.

80
00:03:25,230 --> 00:03:27,840
The part and the pallet go into a buffer, which

81
00:03:27,840 --> 00:03:29,329
is represented by a circle.

82
00:03:29,329 --> 00:03:30,870
Then they go to other machines, which

83
00:03:30,870 --> 00:03:33,030
are represented by squares, and then

84
00:03:33,030 --> 00:03:35,020
travel to other buffers and other machines.

85
00:03:35,020 --> 00:03:37,170
And they travel all throughout the system.

86
00:03:37,170 --> 00:03:40,020
And then, at the final stage, the part

87
00:03:40,020 --> 00:03:42,860
gets disassembled from the empty pallet.

88
00:03:42,860 --> 00:03:44,610
The part leaves, and the pallet goes

89
00:03:44,610 --> 00:03:46,410
into an empty pallet buffer, ready to get

90
00:03:46,410 --> 00:03:48,610
attached to the next part.

91
00:03:48,610 --> 00:03:51,240
So the number of parts in the system

92
00:03:51,240 --> 00:03:54,180
may increase and decrease over time, but the number of pallets

93
00:03:54,180 --> 00:03:55,740
always stays constant.

94
00:03:55,740 --> 00:03:58,650
Another example is a factory in which the amount of material

95
00:03:58,650 --> 00:04:01,500
is controlled by keeping the number of items in the factory

96
00:04:01,500 --> 00:04:02,270
constant.

97
00:04:02,270 --> 00:04:04,410
When the number of items in the factory

98
00:04:04,410 --> 00:04:08,130
reaches a certain number, no additional items

99
00:04:08,130 --> 00:04:12,330
are allowed to enter until one of those items leaves.

100
00:04:12,330 --> 00:04:14,760
Queuing networks are often modeled as Jackson networks,

101
00:04:14,760 --> 00:04:18,209
which are really generalizations of the kind of queuing models

102
00:04:18,209 --> 00:04:19,709
that we talked about earlier.

103
00:04:19,709 --> 00:04:21,750
Jackson networks are relatively easy to compute

104
00:04:21,750 --> 00:04:23,520
performance measures with.

105
00:04:23,520 --> 00:04:26,310
Those performance measures include capacity, average time

106
00:04:26,310 --> 00:04:28,890
in the system, average queue lengths.

107
00:04:28,890 --> 00:04:30,605
We can use them to provide intuition,

108
00:04:30,605 --> 00:04:32,940
and we'll show an example later.

109
00:04:32,940 --> 00:04:35,880
They're easy to optimize and to use for design.

110
00:04:35,880 --> 00:04:37,860
They're valid, or a good approximation,

111
00:04:37,860 --> 00:04:41,050
for a large class of systems.

112
00:04:41,050 --> 00:04:42,520
However, not all.

113
00:04:42,520 --> 00:04:44,970
An important limitation is that storage areas

114
00:04:44,970 --> 00:04:47,850
must be assumed to be infinite, which means that blocking is

115
00:04:47,850 --> 00:04:49,200
assumed not to happen.

116
00:04:49,200 --> 00:04:52,470
Blocking occurs if a storage area which is finite

117
00:04:52,470 --> 00:04:53,990
becomes full.

118
00:04:53,990 --> 00:04:57,420
Then, any station that needs to put its parts into that area

119
00:04:57,420 --> 00:04:59,160
is forced to be idle.

120
00:04:59,160 --> 00:05:01,440
This reduces productivity and efficiency.

121
00:05:01,440 --> 00:05:03,210
Frankly, the infinite buffer assumption

122
00:05:03,210 --> 00:05:07,230
is made because it makes the math a lot easier.

123
00:05:07,230 --> 00:05:09,060
This assumption leads to bad results

124
00:05:09,060 --> 00:05:11,070
for systems with bottlenecks at locations

125
00:05:11,070 --> 00:05:13,770
other than at the first station, because when there's

126
00:05:13,770 --> 00:05:16,290
a bottleneck, there's going to be a large accumulation

127
00:05:16,290 --> 00:05:17,680
of material.

128
00:05:17,680 --> 00:05:21,750
Here's a sort of schematic diagram of an open Jackson

129
00:05:21,750 --> 00:05:22,710
network.

130
00:05:22,710 --> 00:05:26,400
Material arrives from outside the system at the A locations,

131
00:05:26,400 --> 00:05:29,960
which stands for arrivals here, and departs from the system

132
00:05:29,960 --> 00:05:31,410
at the D's.

133
00:05:31,410 --> 00:05:34,260
The green squares are called nodes.

134
00:05:34,260 --> 00:05:36,762
They represent machines or workstations.

135
00:05:36,762 --> 00:05:38,220
They could be machines in parallel,

136
00:05:38,220 --> 00:05:40,170
rather than just a single one.

137
00:05:40,170 --> 00:05:43,560
And there's a storage area, or buffer, in each one.

138
00:05:43,560 --> 00:05:45,360
Items arrive from outside the system

139
00:05:45,360 --> 00:05:51,260
to node i according to a Poisson process with rate alpha i.

140
00:05:51,260 --> 00:05:53,820
Alpha i must be positive for at least

141
00:05:53,820 --> 00:05:57,390
one node, for at least one i.

142
00:05:57,390 --> 00:06:01,140
When an item's service at node i is complete,

143
00:06:01,140 --> 00:06:05,310
it goes to node j next with probability pij.

144
00:06:05,310 --> 00:06:11,460
We define p i 0 as 1 minus the sum of the pij's, and if that's

145
00:06:11,460 --> 00:06:15,555
positive, then items depart from the network at node i.

146
00:06:15,555 --> 00:06:18,690
p i 0 must be positive for at least one i.

147
00:06:18,690 --> 00:06:20,550
We will focus on the special case

148
00:06:20,550 --> 00:06:22,170
in which each node has a single server

149
00:06:22,170 --> 00:06:23,760
with exponential processing time.

150
00:06:23,760 --> 00:06:27,030
The service rate of node i is mu i.

151
00:06:27,030 --> 00:06:30,210
So the system is defined by the alphas--

152
00:06:30,210 --> 00:06:32,280
the arrival rates in the network, the mus--

153
00:06:32,280 --> 00:06:35,850
the service rates of the machines, and the pij's--

154
00:06:35,850 --> 00:06:38,760
the routing probabilities.

155
00:06:38,760 --> 00:06:41,010
The goal of the analysis is to determine

156
00:06:41,010 --> 00:06:42,960
if the system is feasible--

157
00:06:42,960 --> 00:06:46,560
that is, if the arrival rates are within the capacity

158
00:06:46,560 --> 00:06:49,120
of the system.

159
00:06:49,120 --> 00:06:51,060
Also to determine how much inventory

160
00:06:51,060 --> 00:06:54,720
is in the system on the average, and how it's distributed.

161
00:06:54,720 --> 00:06:57,564
And to determine the average waiting time at each node,

162
00:06:57,564 --> 00:06:58,980
and the average time a part spends

163
00:06:58,980 --> 00:07:00,670
in the system as a whole.

164
00:07:00,670 --> 00:07:04,070
The stations need not have the same utilization.

165
00:07:04,070 --> 00:07:05,600
It's possible that the rate of flow

166
00:07:05,600 --> 00:07:09,410
of materials to some stations exceeds their capacity.

167
00:07:09,410 --> 00:07:11,630
If there is at least one station like that,

168
00:07:11,630 --> 00:07:15,140
the system is not feasible.

169
00:07:15,140 --> 00:07:17,600
So let's define a new quantity called lambda.

170
00:07:17,600 --> 00:07:20,450
That's the total arrival rate of items to node i.

171
00:07:20,450 --> 00:07:22,730
This includes items entering the network

172
00:07:22,730 --> 00:07:28,820
at node i and items coming to node i from all other nodes.

173
00:07:28,820 --> 00:07:30,920
We need lambda in order to calculate the waiting

174
00:07:30,920 --> 00:07:33,250
times and the inventories.

175
00:07:33,250 --> 00:07:36,800
pij lambda j is the portion of the flow

176
00:07:36,800 --> 00:07:41,660
that arrives at node j that goes on to node i.

177
00:07:41,660 --> 00:07:46,820
Then, lambda i is equal to alpha i plus the sum of pji lambda j.

178
00:07:46,820 --> 00:07:49,670
That's another way of saying that lambda i is

179
00:07:49,670 --> 00:07:54,170
equal to the arriving flow from outside plus the sum of all

180
00:07:54,170 --> 00:07:56,690
the flows that come from all other nodes in the network

181
00:07:56,690 --> 00:07:59,240
to node i directly.

182
00:07:59,240 --> 00:08:01,370
It's convenient to write this in matrix form.

183
00:08:01,370 --> 00:08:05,840
So we'll define lambda as the vector of the lambda i's, alpha

184
00:08:05,840 --> 00:08:10,640
the vector of the alpha i's, and capital P the matrix of pij.

185
00:08:10,640 --> 00:08:15,600
In that case, lambda is equal to alpha plus P transpose lambda.

186
00:08:15,600 --> 00:08:20,000
We can use this equation to determine lambda.

187
00:08:20,000 --> 00:08:24,560
Solving for lambda, that becomes lambda equals 1 minus P

188
00:08:24,560 --> 00:08:29,060
transpose the matrix inversed times alpha.

189
00:08:29,060 --> 00:08:32,150
Notice that this equation does not

190
00:08:32,150 --> 00:08:33,860
have the service rates in it.

191
00:08:33,860 --> 00:08:36,470
There are no mus in this equation.

192
00:08:36,470 --> 00:08:39,830
Now, to calculate the probability distribution

193
00:08:39,830 --> 00:08:44,480
of all the distributions of material throughout the system,

194
00:08:44,480 --> 00:08:46,350
we can write the following.

195
00:08:46,350 --> 00:08:49,740
If lambda i is less than mu i for each i,

196
00:08:49,740 --> 00:08:54,110
we define rho i as the fraction lambda i over mu i--

197
00:08:54,110 --> 00:08:57,020
that's the utilization of station i--

198
00:08:57,020 --> 00:09:00,840
and pi i of n i is equal to 1 minus rho i times rho i

199
00:09:00,840 --> 00:09:03,500
to the n i.

200
00:09:03,500 --> 00:09:06,680
This is the solution of an M/M/1 queue with arrival rate lambda

201
00:09:06,680 --> 00:09:08,810
i calculated on the previous slide,

202
00:09:08,810 --> 00:09:13,120
and service rate mu i specified by the problem data.

203
00:09:13,120 --> 00:09:14,360
We're not deriving this here.

204
00:09:14,360 --> 00:09:16,190
We're simply stating it.

205
00:09:16,190 --> 00:09:19,390
If lambda i is greater than or equal to mu i for some i,

206
00:09:19,390 --> 00:09:21,030
the demand is not feasible.

207
00:09:21,030 --> 00:09:23,900
The system cannot handle the demand placed on it.

208
00:09:23,900 --> 00:09:28,610
Pi of n1 n2 up to nk is the probability distribution,

209
00:09:28,610 --> 00:09:30,260
the steady-state probability that there

210
00:09:30,260 --> 00:09:34,550
are n i items at node i, i equals 1 through k.

211
00:09:34,550 --> 00:09:37,850
The probability distribution for the entire system

212
00:09:37,850 --> 00:09:42,050
is just the product of all the pi i's from the previous slide.

213
00:09:42,050 --> 00:09:48,890
At each node i, n i bar is equal to rho i over 1 minus rho i.

214
00:09:48,890 --> 00:09:51,160
The solution is in product form.

215
00:09:51,160 --> 00:09:52,910
It says that the probability of the system

216
00:09:52,910 --> 00:09:55,790
being in a given state is the product of the probabilities

217
00:09:55,790 --> 00:09:57,590
of the queues at each state being

218
00:09:57,590 --> 00:10:01,940
in the corresponding state at that queue.

219
00:10:01,940 --> 00:10:04,760
This exact formula is the reason the Jackson network

220
00:10:04,760 --> 00:10:06,080
model is of interest.

221
00:10:06,080 --> 00:10:08,630
It is relatively easy to use to calculate the performance

222
00:10:08,630 --> 00:10:11,180
of a complex system.

223
00:10:11,180 --> 00:10:12,680
The product form solution actually

224
00:10:12,680 --> 00:10:16,200
holds for some more general cases.

225
00:10:16,200 --> 00:10:18,530
However, it has one major restriction.

226
00:10:18,530 --> 00:10:21,260
It's restricted to models of systems with unlimited storage

227
00:10:21,260 --> 00:10:22,370
space.

228
00:10:22,370 --> 00:10:25,730
It cannot model blocking.

229
00:10:25,730 --> 00:10:27,440
It's a good approximation for systems

230
00:10:27,440 --> 00:10:29,810
where blocking is rare-- for example, when the arrival

231
00:10:29,810 --> 00:10:31,970
rate of the material is much less than the capacity

232
00:10:31,970 --> 00:10:33,770
of the system.

233
00:10:33,770 --> 00:10:37,300
It will not work so well where blocking occurs often.

234
00:10:37,300 --> 00:10:40,000


